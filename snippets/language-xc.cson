'.source.xc':
  '#ifndef … #define … #endif':
    'prefix': 'def'
    'body': '#ifndef ${1:SYMBOL}\n#define $1 ${2:value}\n#endif'
  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:.h}>'
  '#include ""':
    'prefix': 'inc'
    'body': '#include "${1:.h}"'
  '#pragma mark':
    'prefix': 'mark'
    'body': '#if 0\n${1:#pragma mark -\n}#pragma mark $2\n#endif\n\n$0'
  'main()':
    'prefix': 'main'
    'body': 'int main() {\n\t${1:/* code */}\n\treturn 0;\n}'
  'For Loop':
    'prefix': 'for'
    'body': 'for (size_t ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}${3:++}) {\n\t${4:/* code */}\n}'
  'Header Include-Guard':
    'prefix': 'once'
    'body': '#ifndef ${1:SYMBOL}\n#define $1\n\n${2}\n\n#endif /* end of include guard: $1 */\n'
  'Typedef':
    'prefix': 'td'
    'body': 'typedef ${1:int} ${2:MyCustomType};'
  'Do While Loop':
    'prefix': 'do'
    'body': 'do {\n\t${0:/* code */}\n} while(${1:/* condition */});'
  'While Loop':
    'prefix': 'while'
    'body': 'while (${1:/* condition */}) {\n\t${2:/* code */}\n}'
  'If Condition':
    'prefix': 'if'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n}'
  'If Else':
    'prefix': 'ife'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else {\n\t${3:/* code */}\n}'
  'If ElseIf':
    'prefix': 'iff'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n}'
  'If ElseIf Else':
    'prefix': 'iffe'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n} else {\n\t${5:/* code */}\n}'
  'Switch Statement':
    'prefix': 'switch'
    'body': 'switch (${1:/* expression */}) {\n\tcase ${2:/* value */}:\n}'
  'case':
    'prefix': 'cs'
    'body': 'case ${1:/* value */}:$0'
  'Struct':
    'prefix': 'st'
    'body': 'struct ${1:name_t} {\n\t${2:/* data */}\n};'
  'void':
    'prefix': 'void'
    'body': 'void ${1:name}(${2:/* arguments */}) {\n\t${3:/* code */}\n}'
  'any function':
    'prefix': 'func'
    'body': '${1:int} ${2:name}(${3:/* arguments */}) {\n\t${5:/* code */}\n\treturn ${4:0};\n}'
